This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) (format=pdflatex 2015.6.17)  16 MAY 2017 23:04
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**classicthesis-preamble.sty
(./classicthesis-preamble.sty
LaTeX2e <2011/06/27>
Babel <3.9h> and hyphenation patterns for 78 languages loaded.

LaTeX Warning: You have requested package `',
               but the package provides `classicthesis-preamble'.

Package: classicthesis-preamble 2011/06/05 v3.0 Your Preamble and Package Loade
r for Classic Thesis Style
! You can't use `\spacefactor' in vertical mode.
\@->\spacefactor 
                 \@m 
l.38 \@
       ifpackageloaded{classicthesis}%
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
l.38 \@
       ifpackageloaded{classicthesis}%
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.38 \@
       ifpackageloaded{classicthesis}%
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line 38.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <5> on input line 38.

Package classicthesis-preamble Warning: Package "classicthesis" should be loade
d AFTER "classicthesis-preamble"..

! Missing $ inserted.
<inserted text> 
                $
l.41 
     
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

Missing character: There is no è in font cmex10!

Overfull \hbox (149.82404pt too wide) in paragraph at lines 38--41
[]$\OML/cmm/m/it/10 ifpackageloaded[][][]$ 
 []

(/usr/share/texlive/texmf-dist/tex/latex/base/ifthen.sty
Package: ifthen 2001/05/26 v1.1c Standard LaTeX ifthen package (DPC)
)
(/usr/share/texlive/texmf-dist/tex/latex/base/inputenc.sty
Package: inputenc 2008/03/30 v1.1d Input encoding file
\inpenc@prehook=\toks14
\inpenc@posthook=\toks15

(/usr/share/texlive/texmf-dist/tex/latex/base/latin9.def
File: latin9.def 2008/03/30 v1.1d Input encoding file
))
(/usr/share/texlive/texmf-dist/tex/generic/babel/babel.sty
Package: babel 2013/12/03 3.9h The Babel package

! Missing \endcsname inserted.
<to be read again> 
                   \@classoptionslist 
l.287     \@empty}
                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\@ifundefined ...dafter \ifx \csname #1\endcsname 
                                                  \relax \expandafter \@firs...
l.287     \@empty}
                  
I'm ignoring this, since I wasn't doing a \csname.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.287     \@empty}
                  
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

Missing character: There is no . in font nullfont!
Missing character: There is no l in font nullfont!
Missing character: There is no d in font nullfont!
Missing character: There is no f in font nullfont!
! Missing \endcsname inserted.
<to be read again> 
                   \@classoptionslist 
l.287     \@empty}
                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \@classoptionslist 
l.296 \ProcessOptions*
                      
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\@use@ption ...sname ds@\CurrentOption \endcsname 
                                                  
l.296 \ProcessOptions*
                      
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \@classoptionslist 
l.296 \ProcessOptions*
                      
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
<argument> ...csname ds@\CurrentOption \endcsname 
                                                  \@empty \fi \fi 
l.296 \ProcessOptions*
                      
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \@classoptionslist 
l.296 \ProcessOptions*
                      
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
<argument> ...csname ds@\CurrentOption \endcsname 
                                                  \relax 
l.296 \ProcessOptions*
                      
I'm ignoring this, since I wasn't doing a \csname.


! Package babel Error: You haven't specified a language option.

See the babel package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.329 ...ry to proceed from here, type x to quit.}
                                                  
You need to specify a language, either as a global option
or as an optional argument to the \usepackage command;
You shouldn't try to proceed from here, type x to quit.

)
Overfull \hbox (20.0pt too wide) in paragraph at lines 287--115
[]
 []

(/usr/share/texlive/texmf-dist/tex/latex/natbib/natbib.sty
Package: natbib 2010/09/13 8.31b (PWD, AO)
\bibhang=\skip41
\bibsep=\skip42

! Undefined control sequence.
l.640  {\@listi
                \global\bibsep\itemsep \global\advance\bibsep by\parsep}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

LaTeX Info: Redefining \cite on input line 694.
\c@NAT@ctr=\count79

! LaTeX Error: Environment thebibliography undefined.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.1063 \renewenvironment{thebibliography}
                                         [1]{%
Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

) (/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
Package: amsmath 2013/01/14 v2.14 AMS math features
\@mathmargin=\skip43

For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
Package: amstext 2000/06/29 v2.01

(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty
File: amsgen.sty 1999/11/30 v2.0
\@emptytoks=\toks16
\ex@=\dimen102
))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty
Package: amsbsy 1999/11/29 v1.2d
\pmbraise@=\dimen103
)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty
Package: amsopn 1999/12/14 v2.01 operator names
)
\inf@bad=\count80
LaTeX Info: Redefining \frac on input line 210.
\uproot@=\count81
\leftroot@=\count82
LaTeX Info: Redefining \overline on input line 306.
\classnum@=\count83
\DOTSCASE@=\count84
LaTeX Info: Redefining \ldots on input line 378.
LaTeX Info: Redefining \dots on input line 381.
LaTeX Info: Redefining \cdots on input line 466.
\Mathstrutbox@=\box26
\strutbox@=\box27
\big@size=\dimen104
LaTeX Font Info:    Redeclaring font encoding OML on input line 566.
LaTeX Font Info:    Redeclaring font encoding OMS on input line 567.
\macc@depth=\count85
\c@MaxMatrixCols=\count86
\dotsspace@=\muskip10
\c@parentequation=\count87
\dspbrk@lvl=\count88
\tag@help=\toks17
\row@=\count89
\column@=\count90
\maxfields@=\count91
\andhelp@=\toks18
\eqnshift@=\dimen105
\alignsep@=\dimen106
\tagshift@=\dimen107
\tagwidth@=\dimen108
\totwidth@=\dimen109
\lineht@=\dimen110
\@envbody=\toks19
\multlinegap=\skip44
\multlinetaggap=\skip45
\mathdisplay@stack=\toks20
LaTeX Info: Redefining \[ on input line 2665.
LaTeX Info: Redefining \] on input line 2666.
)
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
Package: fontenc 2005/09/27 v1.99g Standard LaTeX package

(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def
File: t1enc.def 2005/09/27 v1.99g Standard LaTeX file
LaTeX Font Info:    Redeclaring font encoding T1 on input line 43.
))
(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty
Package: textcomp 2005/09/27 v1.99g Standard LaTeX package
Package textcomp Info: Sub-encoding information:
(textcomp)               5 = only ISO-Adobe without \textcurrency
(textcomp)               4 = 5 + \texteuro
(textcomp)               3 = 4 + \textohm
(textcomp)               2 = 3 + \textestimated + \textcurrency
(textcomp)               1 = TS1 - \textcircled - \t
(textcomp)               0 = TS1 (full)
(textcomp)             Font families with sub-encoding setting implement
(textcomp)             only a restricted character set as indicated.
(textcomp)             Family '?' is the default used for unknown fonts.
(textcomp)             See the documentation for details.
Package textcomp Info: Setting ? sub-encoding to TS1/1 on input line 71.

(/usr/share/texlive/texmf-dist/tex/latex/base/ts1enc.def
File: ts1enc.def 2001/06/05 v3.0e (jk/car/fm) Standard LaTeX file
)
LaTeX Info: Redefining \oldstylenums on input line 266.
Package textcomp Info: Setting cmr sub-encoding to TS1/0 on input line 281.
Package textcomp Info: Setting cmss sub-encoding to TS1/0 on input line 282.
Package textcomp Info: Setting cmtt sub-encoding to TS1/0 on input line 283.
Package textcomp Info: Setting cmvtt sub-encoding to TS1/0 on input line 284.
Package textcomp Info: Setting cmbr sub-encoding to TS1/0 on input line 285.
Package textcomp Info: Setting cmtl sub-encoding to TS1/0 on input line 286.
Package textcomp Info: Setting ccr sub-encoding to TS1/0 on input line 287.
Package textcomp Info: Setting ptm sub-encoding to TS1/4 on input line 288.
Package textcomp Info: Setting pcr sub-encoding to TS1/4 on input line 289.
Package textcomp Info: Setting phv sub-encoding to TS1/4 on input line 290.
Package textcomp Info: Setting ppl sub-encoding to TS1/3 on input line 291.
Package textcomp Info: Setting pag sub-encoding to TS1/4 on input line 292.
Package textcomp Info: Setting pbk sub-encoding to TS1/4 on input line 293.
Package textcomp Info: Setting pnc sub-encoding to TS1/4 on input line 294.
Package textcomp Info: Setting pzc sub-encoding to TS1/4 on input line 295.
Package textcomp Info: Setting bch sub-encoding to TS1/4 on input line 296.
Package textcomp Info: Setting put sub-encoding to TS1/5 on input line 297.
Package textcomp Info: Setting uag sub-encoding to TS1/5 on input line 298.
Package textcomp Info: Setting ugq sub-encoding to TS1/5 on input line 299.
Package textcomp Info: Setting ul8 sub-encoding to TS1/4 on input line 300.
Package textcomp Info: Setting ul9 sub-encoding to TS1/4 on input line 301.
Package textcomp Info: Setting augie sub-encoding to TS1/5 on input line 302.
Package textcomp Info: Setting dayrom sub-encoding to TS1/3 on input line 303.
Package textcomp Info: Setting dayroms sub-encoding to TS1/3 on input line 304.

Package textcomp Info: Setting pxr sub-encoding to TS1/0 on input line 305.
Package textcomp Info: Setting pxss sub-encoding to TS1/0 on input line 306.
Package textcomp Info: Setting pxtt sub-encoding to TS1/0 on input line 307.
Package textcomp Info: Setting txr sub-encoding to TS1/0 on input line 308.
Package textcomp Info: Setting txss sub-encoding to TS1/0 on input line 309.
Package textcomp Info: Setting txtt sub-encoding to TS1/0 on input line 310.
Package textcomp Info: Setting lmr sub-encoding to TS1/0 on input line 311.
Package textcomp Info: Setting lmdh sub-encoding to TS1/0 on input line 312.
Package textcomp Info: Setting lmss sub-encoding to TS1/0 on input line 313.
Package textcomp Info: Setting lmssq sub-encoding to TS1/0 on input line 314.
Package textcomp Info: Setting lmvtt sub-encoding to TS1/0 on input line 315.
Package textcomp Info: Setting qhv sub-encoding to TS1/0 on input line 316.
Package textcomp Info: Setting qag sub-encoding to TS1/0 on input line 317.
Package textcomp Info: Setting qbk sub-encoding to TS1/0 on input line 318.
Package textcomp Info: Setting qcr sub-encoding to TS1/0 on input line 319.
Package textcomp Info: Setting qcs sub-encoding to TS1/0 on input line 320.
Package textcomp Info: Setting qpl sub-encoding to TS1/0 on input line 321.
Package textcomp Info: Setting qtm sub-encoding to TS1/0 on input line 322.
Package textcomp Info: Setting qzc sub-encoding to TS1/0 on input line 323.
Package textcomp Info: Setting qhvc sub-encoding to TS1/0 on input line 324.
Package textcomp Info: Setting futs sub-encoding to TS1/4 on input line 325.
Package textcomp Info: Setting futx sub-encoding to TS1/4 on input line 326.
Package textcomp Info: Setting futj sub-encoding to TS1/4 on input line 327.
Package textcomp Info: Setting hlh sub-encoding to TS1/3 on input line 328.
Package textcomp Info: Setting hls sub-encoding to TS1/3 on input line 329.
Package textcomp Info: Setting hlst sub-encoding to TS1/3 on input line 330.
Package textcomp Info: Setting hlct sub-encoding to TS1/5 on input line 331.
Package textcomp Info: Setting hlx sub-encoding to TS1/5 on input line 332.
Package textcomp Info: Setting hlce sub-encoding to TS1/5 on input line 333.
Package textcomp Info: Setting hlcn sub-encoding to TS1/5 on input line 334.
Package textcomp Info: Setting hlcw sub-encoding to TS1/5 on input line 335.
Package textcomp Info: Setting hlcf sub-encoding to TS1/5 on input line 336.
Package textcomp Info: Setting pplx sub-encoding to TS1/3 on input line 337.
Package textcomp Info: Setting pplj sub-encoding to TS1/3 on input line 338.
Package textcomp Info: Setting ptmx sub-encoding to TS1/4 on input line 339.
Package textcomp Info: Setting ptmj sub-encoding to TS1/4 on input line 340.
)
(/usr/share/texlive/texmf-dist/tex/latex/tools/xspace.sty
Package: xspace 2009/10/20 v1.13 Space after command names (DPC,MH)
)
(/usr/share/texlive/texmf-dist/tex/latex/tools/tabularx.sty
Package: tabularx 1999/01/07 v2.07 `tabularx' package (DPC)

(/usr/share/texlive/texmf-dist/tex/latex/tools/array.sty
Package: array 2008/09/09 v2.4c Tabular extension package (FMi)
\col@sep=\dimen111
\extrarowheight=\dimen112
\NC@list=\toks21
\extratabsurround=\skip46
\backup@length=\skip47
)
\TX@col@width=\dimen113
\TX@old@table=\dimen114
\TX@old@col=\dimen115
\TX@target=\dimen116
\TX@delta=\dimen117
\TX@cols=\count92
\TX@ftn=\toks22
)
(/usr/share/texlive/texmf-dist/tex/latex/mparhack/mparhack.sty
Package: mparhack 2005/04/17 v1.4 (T. Sgouros and S. Ulrich)
)
(/usr/share/texlive/texmf-dist/tex/latex/base/fixltx2e.sty
Package: fixltx2e 2006/09/13 v1.1m fixes to LaTeX
LaTeX Info: Redefining \em on input line 420.
LaTeX Info: The control sequence `\[' is already robust on input line 471.
LaTeX Info: The control sequence `\]' is already robust on input line 472.
)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
Package: amssymb 2013/01/14 v3.01 AMS font symbols

(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty
Package: amsfonts 2013/01/14 v3.01 Basic AMSFonts support
\symAMSa=\mathgroup4
\symAMSb=\mathgroup5
LaTeX Font Info:    Overwriting math alphabet `\mathfrak' in version `bold'
(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.
))
(/usr/share/texlive/texmf-dist/tex/latex/relsize/relsize.sty
Package: relsize 2013/03/29 ver 4.1


Package relsize Warning: Failed to get list of defined font sizes.
(relsize)                Size scaling will attempt arbitrary sizes..

) (/usr/share/texlive/texmf-dist/tex/latex/acronym/acronym.sty
Package: acronym 2012/10/29 v1.38 Support for acronyms (Tobias Oetiker)

(/usr/share/texlive/texmf-dist/tex/latex/bigfoot/suffix.sty
Package: suffix 2006/07/15 1.5 Variant command support
)
(/usr/share/texlive/texmf-dist/tex/generic/xstring/xstring.sty
(/usr/share/texlive/texmf-dist/tex/generic/xstring/xstring.tex
\@xs@message=\write3
\integerpart=\count93
\decimalpart=\count94
)
Package: xstring 2013/10/13  v1.7c  String manipulations (C Tellechea)
)
\AC@clearlist=\toks23
)
\abcd=\skip48
\c@dummy=\count95

! You can't use `\spacefactor' in vertical mode.
\@->\spacefactor 
                 \@m {}
l.180 \@
        ifpackageloaded{natbib}%
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
l.180 \@
        ifpackageloaded{natbib}%
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.180 \@
        ifpackageloaded{natbib}%
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.


Package classicthesis-preamble Warning: Package "natbib" not loaded, command "c
author" will not work..

! Missing $ inserted.
<inserted text> 
                $
l.192 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

Missing character: There is no è in font cmex10!

Overfull \hbox (119.96103pt too wide) in paragraph at lines 180--192
[]$[]\OML/cmm/m/it/10 ifpackageloaded[][][]$ 
 []

(/usr/share/texlive/texmf-dist/tex/latex/caption/caption.sty
Package: caption 2013/05/02 v3.3-89 Customizing captions (AR)

(/usr/share/texlive/texmf-dist/tex/latex/caption/caption3.sty
Package: caption3 2013/05/02 v1.6-88 caption3 kernel (AR)
Package caption3 Info: TeX engine: e-TeX on input line 57.

(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty
Package: keyval 1999/03/16 v1.13 key=value parser (DPC)
\KV@toks@=\toks24
)
\captionmargin=\dimen118
\captionmargin@=\dimen119
\captionwidth=\dimen120
\caption@tempdima=\dimen121
\caption@indent=\dimen122
\caption@parindent=\dimen123
\caption@hangindent=\dimen124
\abovecaptionskip=\skip49
\belowcaptionskip=\skip50
Package caption Info: Unknown document class (or package),
(caption)             standard defaults will be used.
)

Package caption Warning: Unsupported document class (or package) detected,
(caption)                usage of the caption package is not recommended.
See the caption package documentation for explanation.

Package caption Info: \@makecaption = undefined.
\c@ContinuedFloat=\count96
) (/usr/share/texlive/texmf-dist/tex/latex/listings/listings.sty
\lst@mode=\count97
\lst@gtempboxa=\box28
\lst@token=\toks25
\lst@length=\count98
\lst@currlwidth=\dimen125
\lst@column=\count99
\lst@pos=\count100
\lst@lostspace=\dimen126
\lst@width=\dimen127
\lst@newlines=\count101
\lst@lineno=\count102
\lst@maxwidth=\dimen128

(/usr/share/texlive/texmf-dist/tex/latex/listings/lstmisc.sty
File: lstmisc.sty 2013/08/26 1.5b (Carsten Heinz)
\c@lstnumber=\count103
\lst@skipnumbers=\count104
\lst@framebox=\box29
)
(/usr/share/texlive/texmf-dist/tex/latex/listings/listings.cfg
File: listings.cfg 2013/08/26 1.5b listings configuration
))
Package: listings 2013/08/26 1.5b (Carsten Heinz)

(/usr/share/texlive/texmf-dist/tex/latex/subfig/subfig.sty
Package: subfig 2005/06/28 ver: 1.3 subfig package
\c@KVtest=\count105
\sf@farskip=\skip51
\sf@captopadj=\dimen129
\sf@capskip=\skip52
\sf@nearskip=\skip53

! Missing \endcsname inserted.
<to be read again> 
                   \@classoptionslist 
l.297 \ProcessPackageOptions
                            
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\@ifundefined ...dafter \ifx \csname #1\endcsname 
                                                  \relax \expandafter \@firs...
l.297 \ProcessPackageOptions
                            
I'm ignoring this, since I wasn't doing a \csname.

\c@subfigure=\count106

! LaTeX Error: No counter 'figure' defined.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

\c@subfigure@save=\count107
! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Extra \endcsname.
\@ifundefined ...dafter \ifx \csname #1\endcsname 
                                                  \relax \expandafter \@firs...
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\newcounter ...ifdefinable \csname c@#1\endcsname 
                                                  {\@definecounter {#1}}\@if...
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

\c@=\count108
! Extra \endcsname.
\@definecounter ...ewcount \csname c@#1\endcsname 
                                                  \setcounter {#1}\z@ \globa...
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing number, treated as zero.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Extra \endcsname.
<argument> ...xt@figure\endcsname depth\endcsname 
                                                  \z@ \relax 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing number, treated as zero.
<to be read again> 
                   \relax 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \relax 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, nd, nc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\@definecounter ...r \let \csname cl@#1\endcsname 
                                                  \@empty \@addtoreset {#1}{...
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\@definecounter ...er \let \csname p@#1\endcsname 
                                                  \@empty \expandafter \gdef...
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing number, treated as zero.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Extra \endcsname.
<argument> ...xt@figure\endcsname depth\endcsname 
                                                  \@ne \relax 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@figure 
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
\caption@ifatletter ->\ifnum \the \catcode 
                                           `\@ =11 \expandafter \@firstoftwo...
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
<argument> ...lineno\endcsname {\the \inputlineno 
                                                  }
l.298 ...ined{c@subfigure}{\newsubfloat{figure}}{}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@subtable=\count

! LaTeX Error: No counter 'table' defined.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@subtable@save=\count
! Missing \endcsname inserted.
<to be read again> 
                   \ext@table 
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@table 
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \ext@table 
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
\caption@ifatletter ->\ifnum \the \catcode 
                                           `\@ =11 \expandafter \@firstoftwo...
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
<argument> ...lineno\endcsname {\the \inputlineno 
                                                  }
l.299 ...efined{c@subtable}{\newsubfloat{table}}{}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.316 }
       
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
<write> ... =\string \skip \the \allocationnumber 
                                                  
l.317 \newskip\sf@top
                     
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\sf@top=\skip
! Use of \the doesn't match its definition.
<write> ... =\string \skip \the \allocationnumber 
                                                  
l.318 \newskip\sf@bottom
                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\sf@bottom=\skip
! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.508   \let\sf@addcontentsline=\addcontentsline}
                                                 
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


Overfull \hbox (199.95605pt too wide) in paragraph at lines 298--516
[]\T1/cmr/m/n/10 depthdepthdepthdepthdepthdepthdepth^^A
 []

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.590     \fi}}
               
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.598 }
       
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.677 }
       
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

)
! Use of \the doesn't match its definition.
\@pushfilename ...ame }{\@currext }{\the \catcode 
                                                  `\@}\@currnamestack }
l.229 \pdfcompresslevel
                       =9
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
Package: hyperref 2012/11/06 v6.83m Hypertext links for LaTeX

! Use of \the doesn't match its definition.
\x ...\endgroup \toks@ {\catcode 96=\the \catcode 
                                                  `\`\relax \catcode 61=\the...
l.48 \x
       
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x ...catcode `\`\relax \catcode 61=\the \catcode 
                                                  `\=\relax }}\x 
l.48 \x
       
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
l.78     \the\toks@
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.79     \x\$
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.80     \x\&
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.81     \x\^
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.82     \x\_
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.83     \x\|
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.84     \x\:
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.85     \x\(
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.86     \x\)
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
\GenericError  ...                                
                                                    #4  \errhelp \@err@     ...
l.86     \x\)
             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \let \@err@               ...
l.86     \x\)
             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \@empty \def \MessageBreak...
l.86     \x\)
             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                     \endgroup 
l.86     \x\)
             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \the doesn't match its definition.
\x #1->\catcode `\noexpand #1=\the \catcode 
                                            `#1\relax 
l.87     \x\[
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
<argument> \def \reserved@a {
                             \def \@currenvir {equation*}\edef \@currenvline...
l.87     \x\[
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\on@line -> on input line \the \inputlineno 
                                            
l.87     \x\[
             %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   2
l.363 \long\def\Hy@ReturnAfterFiFiEnd#1\fi#2
                                            \Hy@ReturnEnd{\fi\fi#1}
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Undefined control sequence.
l.363 ...Hy@ReturnAfterFiFiEnd#1\fi#2\Hy@ReturnEnd
                                                  {\fi\fi#1}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Extra \fi.
l.363 ...eturnAfterFiFiEnd#1\fi#2\Hy@ReturnEnd{\fi
                                                  \fi#1}
I'm ignoring this; it doesn't match any \if.

! Extra \fi.
l.363 ...rnAfterFiFiEnd#1\fi#2\Hy@ReturnEnd{\fi\fi
                                                  #1}
I'm ignoring this; it doesn't match any \if.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   1
l.363 ...AfterFiFiEnd#1\fi#2\Hy@ReturnEnd{\fi\fi#1
                                                  }
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Undefined control sequence.
l.364 \long\def\Hy@ReturnAfterElseFiFiEnd
                                         #1\else#2\Hy@ReturnEnd{\fi\fi#1}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   1
l.364 \long\def\Hy@ReturnAfterElseFiFiEnd#1
                                           \else#2\Hy@ReturnEnd{\fi\fi#1}
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Extra \else.
l.364 \long\def\Hy@ReturnAfterElseFiFiEnd#1\else
                                                #2\Hy@ReturnEnd{\fi\fi#1}
I'm ignoring this; it doesn't match any \if.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   2
l.364 \long\def\Hy@ReturnAfterElseFiFiEnd#1\else#2
                                                  \Hy@ReturnEnd{\fi\fi#1}
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Undefined control sequence.
l.364 ...urnAfterElseFiFiEnd#1\else#2\Hy@ReturnEnd
                                                  {\fi\fi#1}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Extra \fi.
l.364 ...fterElseFiFiEnd#1\else#2\Hy@ReturnEnd{\fi
                                                  \fi#1}
I'm ignoring this; it doesn't match any \if.

! Extra \fi.
l.364 ...rElseFiFiEnd#1\else#2\Hy@ReturnEnd{\fi\fi
                                                  #1}
I'm ignoring this; it doesn't match any \if.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   1
l.364 ...lseFiFiEnd#1\else#2\Hy@ReturnEnd{\fi\fi#1
                                                  }
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Undefined control sequence.
l.365 \def\Hy@safe@activestrue
                              {\csname @safe@activestrue\endcsname}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.366 \def\Hy@safe@activesfalse
                               {\csname @safe@activesfalse\endcsname}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.403   \def\hypercalcbp
                        #1{%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   1
l.403   \def\hypercalcbp#1
                          {%
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Use of \the doesn't match its definition.
l.404     \strip@pt\dimexpr
                            0.99626401\dimexpr(#1)\relax\relax
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \rem@pt has an extra }.
<inserted text> 
                \par 
l.405   }
         %
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
99626401\dimexpr (##1)\relax \relax 
! Paragraph ended before \rem@pt was complete.
<to be read again> 
                   \par 
l.405   }
         %
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
l.406   \def\hypercalcbpdef
                           {\def}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.408 \def\pdfstringdef
                       #1#2{%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   1
l.408 \def\pdfstringdef#1
                         #2{%
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Illegal parameter number in definition of \Hy@RestoreCatcodes.
<to be read again> 
                   2
l.408 \def\pdfstringdef#1#2
                           {%
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.

! Undefined control sequence.
\\  ->\let \reserved@e 
                       \relax \let \reserved@f \relax \@ifstar {\let \reserv...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \@pr@videpackage doesn't match its definition.
\new@ifnextchar ...served@d = #1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
<argument> \def \reserved@a *
                             {\let \reserved@e \vadjust \let \reserved@f \no...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
<argument> \def \reserved@a *{\let \reserved@e 
                                               \vadjust \let \reserved@f \no...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \@pr@videpackage doesn't match its definition.
\@ifnextchar ... \reserved@d =#1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@newline doesn't match its definition.
\@ifnextchar ...eserved@d =#1\def \reserved@a {#2}
                                                  \def \reserved@b {#3}\futu...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
\GenericError  ...                                
                                                    #4  \errhelp \@err@     ...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \let \@err@               ...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \@empty \def \MessageBreak...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                     \endgroup 
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \@pr@videpackage doesn't match its definition.
\@ifnch ...eserved@d \let \reserved@c \reserved@a 
                                                  \else \let \reserved@c \re...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
<argument> ...et \reserved@f \nobreak \@xnewline }
                                                  \reserved@a 
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
\new@ifnextchar ...ved@d = #1\def \reserved@a {#2}
                                                  \def \reserved@b {#3}\futu...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
\@ifnextchar ... \reserved@d =#1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@newline doesn't match its definition.
\@ifnextchar ...eserved@d =#1\def \reserved@a {#2}
                                                  \def \reserved@b {#3}\futu...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
\GenericError  ...                                
                                                    #4  \errhelp \@err@     ...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \let \@err@               ...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \@empty \def \MessageBreak...
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                     \endgroup 
l.410     \escapechar`\\
                        %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \@pr@videpackage doesn't match its definition.
\@ifnch ...eserved@d \let \reserved@c \reserved@a 
                                                  \else \let \reserved@c \re...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
\new@ifnextchar ...ved@a {#2}\def \reserved@b {#3}
                                                  \futurelet \@let@token \ne...
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
\new@ifnch ...@d \let \reserved@b \reserved@a \fi 
                                                  \reserved@b 
l.410     \escapechar`\\
                        %
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
l.411     \edef\0
                 {\string\0}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.412     \edef\1
                 {\string\1}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.413     \edef\2
                 {\string\2}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.414     \edef\3
                 {\string\3}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.415     \ifHy@unicode
                       
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.416       \edef\8
                   {\string\8}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.417       \edef\9
                   {\string\9}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                    #4  \errhelp \@err@     ...
l.418       \fontencoding{PU}
                             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \let \@err@               ...
l.418       \fontencoding{PU}
                             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \@empty \def \MessageBreak...
l.418       \fontencoding{PU}
                             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                     \endgroup 
l.418       \fontencoding{PU}
                             %
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.419       \HyPsd@UTFviii
                          
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.420       \def\ifpdfstringunicode
                                   ##1##2{##1}%
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.425     \let\utf@viii@undeferr
                                \HyPsd@utf@viii@undeferr
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.425 ...utf@viii@undeferr\HyPsd@utf@viii@undeferr
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \HyPsd@add@accent 
                             
l.430     \let
              \{\textbraceleft
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\\  ->\let \reserved@e 
                       \relax \let \reserved@f \relax \@ifstar {\let \reserv...
l.432     \let\\
                \textbackslash
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \@pr@videpackage doesn't match its definition.
\new@ifnextchar ...served@d = #1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
<argument> \def \reserved@a *
                             {\let \reserved@e \vadjust \let \reserved@f \no...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
<argument> \def \reserved@a *{\let \reserved@e 
                                               \vadjust \let \reserved@f \no...
l.432     \let\\
                \textbackslash
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \@pr@videpackage doesn't match its definition.
\@ifnextchar ... \reserved@d =#1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@newline doesn't match its definition.
\@ifnextchar ...eserved@d =#1\def \reserved@a {#2}
                                                  \def \reserved@b {#3}\futu...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
\GenericError  ...                                
                                                    #4  \errhelp \@err@     ...
l.432     \let\\
                \textbackslash
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \let \@err@               ...
l.432     \let\\
                \textbackslash
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                  \@empty \def \MessageBreak...
l.432     \let\\
                \textbackslash
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\GenericError  ...                                
                                                     \endgroup 
l.432     \let\\
                \textbackslash
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \@pr@videpackage doesn't match its definition.
\@ifnch ...eserved@d \let \reserved@c \reserved@a 
                                                  \else \let \reserved@c \re...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
<argument> ...et \reserved@f \nobreak \@xnewline }
                                                  \reserved@a 
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
\new@ifnextchar ...ved@d = #1\def \reserved@a {#2}
                                                  \def \reserved@b {#3}\futu...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@pr@videpackage doesn't match its definition.
\@ifnextchar ... \reserved@d =#1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@newline doesn't match its definition.
\@ifnextchar ...eserved@d =#1\def \reserved@a {#2}
                                                  \def \reserved@b {#3}\futu...
l.432     \let\\
                \textbackslash
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
\GenericError  ...                                
                                                    #4  \errhelp \@err@     ...
l.432     \let\\
                \textbackslash
(That makes 100 errors; please try again.) 
Here is how much of TeX's memory you used:
 5152 strings out of 493304
 72783 string characters out of 6139871
 128575 words of memory out of 5000000
 8596 multiletter control sequences out of 15000+600000
 4403 words of font info for 15 fonts, out of 8000000 for 9000
 957 hyphenation exceptions out of 8191
 36i,2n,38p,349b,219s stack positions out of 5000i,500n,10000p,200000b,80000s

!  ==> Fatal error occurred, no output PDF file produced!
